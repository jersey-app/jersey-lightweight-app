buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath (group: 'com.sahlbach.gradle', name: 'gradle-jetty-eclipse-plugin', version: '1.9.+')
    }
}

project.ext {
    clientProjects = project(":").subprojects.findAll { it.name.endsWith('-client') }
    resourceProjects = project(":").subprojects.findAll { it.name.endsWith('-resource') }
    webProjects = project(":").subprojects.findAll { it.name.endsWith('-web') }
}


allprojects {
    apply plugin: 'idea'
}

idea {
    project {
        jdkName = JavaVersion.VERSION_1_7
        languageLevel = JavaVersion.VERSION_1_7

        ipr.withXml { xml ->
            def mapping = xml.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping
            mapping.@vcs = 'Git'
            mapping.@directory = '$PROJECT_DIR$'
        }
    }
}


subprojects {
    apply plugin: 'java'
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7

    project.ext {
        guavaVersion = '18.0'
        jodaTimeVersion = '2.4'
        servletVersion = '2.5'
        jacksonVersion = '2.4.2'
        jerseyVersion = '2.12'
        hk2Version = '2.4.0-b01'
        slf4jVersion = "1.7.6"

        junitVersion = '4.11'
        hamcrestVersion = '1.3'
        mockitoVersion = '1.9.5'

        swaggerVersion = '1.3.10'
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked"
        options.compilerArgs << "-Xlint:deprecation"
        options.encoding = "UTF-8"
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compile(
                "com.google.guava:guava:$guavaVersion",
                "joda-time:joda-time:$jodaTimeVersion",
                "org.glassfish.hk2:hk2-api:$hk2Version",
                "org.slf4j:slf4j-nop:$slf4jVersion"
        )

        testCompile(
                "junit:junit:$junitVersion",
                "org.hamcrest:hamcrest-library:$hamcrestVersion",
                "org.mockito:mockito-core:$mockitoVersion"
        )
    }
}

configure(clientProjects) {

}

configure(resourceProjects) {
    dependencies {
        compile(
                clientProjects,
                "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion",
                "com.fasterxml.jackson.datatype:jackson-datatype-joda:$jacksonVersion",
                "com.fasterxml.jackson.datatype:jackson-datatype-guava:$jacksonVersion",
                "org.glassfish.jersey.core:jersey-common:$jerseyVersion",
                "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion",
                "javax.servlet:servlet-api:$servletVersion",
                "com.wordnik:swagger-core_2.10:$swaggerVersion",
                "com.wordnik:swagger-annotations:$swaggerVersion",
                "com.wordnik:swagger-jersey2-jaxrs_2.10:$swaggerVersion"

        )
    }
}

// configure as web application (servlet 2.5)
configure(webProjects) {
    apply plugin: 'jettyEclipse'
    apply plugin: 'war'

    ext {
    }

    dependencies {
        compile resourceProjects
        compile(
                "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
        )

        runtime(
                "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
        )
    }
}

// configured as stand alone application
configure(project(':interfaces-web')) {
    apply plugin: 'application'

    mainClassName = "com.metaphor.interfaces.runner.StandaloneRunner"

    dependencies {
        compile(
                "org.glassfish.jersey.containers:jersey-container-grizzly2-http:$jerseyVersion"
        )
    }
}
